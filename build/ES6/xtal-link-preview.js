import{CorsAnywhere}from"./node_modules/ava-pwar/cors-anywhere.js";import{define}from"./node_modules/xtal-latx/define.js";export function qsa(css,from){return[].slice.call((from?from:this).querySelectorAll(css))}const preview="preview",image_width="image-width";export class XtalLinkPreview extends CorsAnywhere{constructor(){super();this._serviceUrl="https://cors-anywhere.herokuapp.com/";this._preview=!1;this._imageWidth=150;this.style.display="block"}static get is(){return"xtal-link-preview"}get preview(){return this._preview}set preview(val){this.attr(preview,val,"")}get imageWidth(){return this._imageWidth}set imageWidth(val){this.attr(image_width,val.toString())}static get observedAttributes(){return super.observedAttributes.concat([preview,image_width])}connectedCallback(){this._upgradeProperties([preview,"imageWidth"]);super.connectedCallback()}calculateURL(){return this._serviceUrl+this._href}onPropsChange(){if(!this._connected||!this._preview||this.disabled||!this._href||!this._serviceUrl)return;this.doFetch()}getMetaContent(htmlDoc,name,val){let metas=qsa("meta["+name+"=\""+val+"\"]",htmlDoc),meta=metas.filter(item=>item.content);if(meta&&0<meta.length)return meta[0].content;return null}getAbsPath(imageSrc){let newSrc=imageSrc;if(!imageSrc.startsWith("http")&&!imageSrc.startsWith("data")){if(imageSrc.startsWith("/")){newSrc=this._href.split("/").slice(0,3).join("/")+imageSrc}else{const mid=this._href.endsWith("/")?"":"/";if(newSrc.startsWith("/"))newSrc.replace("/","");newSrc=this._href+mid+imageSrc}}return newSrc}processResponse(response){response.text().then(respText=>{this.fetchInProgress=!1;const parser=new DOMParser,htmlDoc=parser.parseFromString(respText,"text/html");let imageSrc=this.getMetaContent(htmlDoc,"name","twitter:image:src");if(!imageSrc)imageSrc=this.getMetaContent(htmlDoc,"name","twitter:image");if(!imageSrc)imageSrc=this.getMetaContent(htmlDoc,"property","og:image");if(!imageSrc){const img=htmlDoc.querySelector("img");if(img){imageSrc=img.getAttribute("src");imageSrc=this.getAbsPath(imageSrc);console.log(imageSrc)}}if(!imageSrc){const iconLink=htmlDoc.querySelector("link[rel=\"icon\"]");if(iconLink){imageSrc=iconLink.getAttribute("href");imageSrc=this.getAbsPath(imageSrc)}}let titleEl=htmlDoc.querySelector("title");if(titleEl)this.title=titleEl.innerText;let description=this.getMetaContent(htmlDoc,"name","description");if(!description){description=""}else{this.title=this.title.replace(description,"")}this.innerHTML=`
                <div>
                    <details open>
                        <summary>${this.title}</summary>
                        <p>${description}</p>
                    </details>
                    <img alt="${this.title}" width="${this._imageWidth}" src="${imageSrc}"/>
                </div>
            `;this.fetchComplete=!0})}attributeChangedCallback(name,oldValue,newValue){switch(name){case"preview":this._preview=null!==newValue;break;}super.attributeChangedCallback(name,oldValue,newValue)}}define(XtalLinkPreview);